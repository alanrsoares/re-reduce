import { useDispatch, useMappedState } from "redux-react-hook";
import { applySpec } from "ramda";
import { StoreContext } from "redux-react-hook";

import { ActionCreator, bindActionCreators, SelectorSpec } from "../";
import { Tree } from "../helpers/objects";

export const StoreProvider = StoreContext.Provider;

/**
 * Return store-bound action-creators.
 *
 * @param actions action-creators generated by "re-reduced/createActions"
 */
export function useActions<TActions extends Tree<ActionCreator<any>> = {}>(
  actions: TActions
): TActions {
  const dispatch = useDispatch();
  return bindActionCreators(actions)(dispatch).actions;
}

export type SimpleMapStateToProps<TResult, TState> = (state: TState) => TResult;

/**
 * Return mappedState.
 *
 * @param selectorOrMapState either normal mapStateToProps (without ownProps as 2nd parameter) or selectorSpecs
 */
export function useReduxState<TResult, TState = any>(
  selectorOrMapState:
    | SelectorSpec<TResult, TState>
    | SimpleMapStateToProps<TResult, TState>
): TResult {
  const stateToProps =
    typeof selectorOrMapState === "object"
      ? applySpec<TResult>(selectorOrMapState)
      : selectorOrMapState;

  return useMappedState<TResult>(stateToProps);
}
