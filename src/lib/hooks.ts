import { useMemo } from "react";
import applySpec from "ramda/src/applySpec";
import { useDispatch, useSelector } from "react-redux";

import { Tree } from "../helpers/objects";
import { ActionCreator } from "./core";
import { bindActionCreators, SelectorSpec } from "./react-redux";

/**
 * Return store-bound action-creators.
 *
 * @param actions action-creators generated by "re-reduced/createActions"
 */
export function useActions<TActions extends Tree<ActionCreator<any>> = {}>(
  actions: TActions
): TActions {
  const dispatch = useDispatch();
  const boundActions = useMemo(() => {
    return bindActionCreators(actions)(dispatch).actions;
  }, [dispatch, actions]);

  return boundActions;
}

export type SimpleMapStateToProps<TResult, TState> = (state: TState) => TResult;

/**
 * Return mappedState.
 *
 * @param selectorOrMapState either normal mapStateToProps (without ownProps as 2nd parameter) or selectorSpecs
 */
export function useReduxState<TResult, TState = any>(
  selectorOrMapState:
    | SelectorSpec<TResult, TState>
    | SimpleMapStateToProps<TResult, TState>
): TResult {
  const stateToProps = useMemo(() => {
    return typeof selectorOrMapState === "object"
      ? // selector
        applySpec<TResult>(selectorOrMapState)
      : // mapStateFn
        selectorOrMapState;
  }, [selectorOrMapState]);

  const state = useSelector<TResult>(stateToProps);
  return state;
}
