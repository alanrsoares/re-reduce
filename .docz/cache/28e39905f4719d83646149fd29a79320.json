{"remainingRequest":"/Users/alanrsoares/dev/re-reduced/node_modules/docz/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/alanrsoares/dev/re-reduced/node_modules/docz/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/alanrsoares/dev/re-reduced/node_modules/source-map-loader/index.js!/Users/alanrsoares/dev/re-reduced/docs/getting-started.mdx","dependencies":[{"path":"/Users/alanrsoares/dev/re-reduced/docs/getting-started.mdx","mtime":1557715050710},{"path":"/Users/alanrsoares/dev/re-reduced/node_modules/docz/node_modules/cache-loader/dist/cjs.js","mtime":1557712913498},{"path":"/Users/alanrsoares/dev/re-reduced/node_modules/docz/node_modules/babel-loader/lib/index.js","mtime":1557712913458},{"path":"/Users/alanrsoares/dev/re-reduced/node_modules/docz/node_modules/@mdx-js/loader/index.js","mtime":1557712913830},{"path":"/Users/alanrsoares/dev/re-reduced/node_modules/source-map-loader/index.js","mtime":1553206056663}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/alanrsoares/dev/re-reduced/docs/getting-started.mdx"],"names":["React","mdx","Playground","Counter","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground } from \"docz\";\nimport Counter from \"../examples/Counter\";\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting Started`}</h1>\n    <p>{`This section will walk you through the main features of `}<inlineCode parentName=\"p\">{`re-reduced`}</inlineCode>{` with practical examples:`}</p>\n    <p>{`In the following examples we'll be building a simple counter app.`}</p>\n    <h2 {...{\n      \"id\": \"defining-a-type-system\"\n    }}>{`Defining a type system`}</h2>\n    <p><inlineCode parentName=\"p\">{`[root]/examples/Counter/types.ts`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`export interface State {\n  counter: number;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"creating-actions\"\n    }}>{`Creating Actions`}</h2>\n    <p><inlineCode parentName=\"p\">{`[root]/examples/Counter/actions.ts`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createAction } from \"re-reduced\";\n\nexport default {\n  adjust: createAction<number>(\"ADJUST\"),\n  decrement: createAction(\"DECREMENT\"),\n  increment: createAction(\"INCREMENT\"),\n};\n`}</code></pre>\n    <p>{`alternatively, actions can be created in bulk using `}<inlineCode parentName=\"p\">{`createActions`}</inlineCode></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note that, when using createActions, the action type is infered from the action name and namespace`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createActions } from \"re-reduced\";\n\nexport default createActions(\"COUNTER\", create => ({\n  adjust: create.action<number>(),\n  decrement: create.action(),\n  increment: create.action(),\n}));\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"creating-reducers\"\n    }}>{`Creating Reducers`}</h2>\n    <p><inlineCode parentName=\"p\">{`[root]/examples/Counter/reducers.ts`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { combineReducers } from \"redux\";\nimport { createReducer, match } from \"re-reduced\";\n\nimport actions from \"./actions\";\nimport { State } from \"./types\";\n\nconst INITIAL_STATE = 0;\n\nexport const counter = createReducer<number>(\n  [\n    actions.increment.reduce(state => state + 1),\n    actions.decrement.reduce(state => state - 1),\n    actions.adjust.reduce((state, payload) => state + payload),\n  ],\n  INITIAL_STATE\n);\n\n// which can also be written like:\n\nexport const counter = createReducer<number>(\n  [\n    match(actions.increment, state => state + 1),\n    match(actions.decrement, state => state - 1),\n    match(actions.adjust, (state, payload) => state + payload),\n  ],\n  INITIAL_STATE\n);\n\nexport default combineReducers<State>({\n  counter,\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"creating-selectors\"\n    }}>{`Creating selectors`}</h2>\n    <p><inlineCode parentName=\"p\">{`Selectors`}</inlineCode>{` in redux are functions defined in terms of the application state and perform `}<inlineCode parentName=\"p\">{`derivation`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`aggregation`}</inlineCode>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><a parentName=\"p\" {...{\n          \"href\": \"https://github.com/reduxjs/reselect\"\n        }}><inlineCode parentName=\"a\">{`reselect`}</inlineCode></a>{` is the recommended library for selector composition.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createSelector } from \"reselect\";\n\nimport { State } from \"./types\";\n\nexport const getCounter = (state: State) => state.counter;\n\nexport const getCounterIsOdd = createSelector(\n  getCounter,\n  counter => counter % 2 !== 0\n);\n\nexport const getCounterIsPositive = createSelector(\n  getCounter,\n  counter => counter >= 0\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"connecting-a-component\"\n    }}>{`Connecting a component`}</h2>\n    <p>{`Re-reduced provides the `}<inlineCode parentName=\"p\">{`connectWithActions`}</inlineCode>{` helper function for easily connecting state and actions to a component.`}</p>\n    <p><inlineCode parentName=\"p\">{`[root]/src/ui/containers/Counter.tsx`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import * as React from \"react\";\nimport { connectWithActions } from \"re-reduced\";\n\nimport actions from \"./actions\";\nimport * as selectors from \"./selectors\";\n\ninterface Props {\n  count: number;\n  isOdd: boolean;\n  isPositive: boolean;\n  actions: typeof actions;\n}\n\nconst Counter = (props: Props) => (\n  <section>\n    <button onClick={() => props.actions.decrement()}>-1</button>\n    <button onClick={() => props.actions.adjust(-5)}>-5</button>\n    <button\n      disabled\n      style={{\n        color: props.isPositive ? (props.isOdd ? \"blue\" : \"green\") : \"red\",\n        fontWeight: \"bold\",\n        paddingLeft: 5,\n        paddingRight: 5,\n        width: 50,\n      }}\n    >\n      {props.count}\n    </button>\n    <button onClick={() => props.actions.adjust(5)}>+5</button>\n    <button onClick={() => props.actions.increment()}>+1</button>\n  </section>\n);\n\nconst enhance = connectWithActions<Props>(actions, {\n  count: selectors.getCounter,\n  isOdd: selectors.getCounterIsOdd,\n  isPositive: selectors.getCounterIsPositive,\n});\n\nexport default enhance(Counter);\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note that `}<inlineCode parentName=\"p\">{`connectWithActions`}</inlineCode>{` does not provide 100% feature parity with `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/reduxjs/react-redux\"\n        }}>{`react-redux's`}</a>{` `}<a parentName=\"p\" {...{\n          \"href\": \"https://react-redux.js.org/introduction/quick-start#connect\"\n        }}>{`connect`}</a>{`.`}</p>\n    </blockquote>\n    <p>{`The above `}<inlineCode parentName=\"p\">{`enhance`}</inlineCode>{` example can be easily rewritten without `}<inlineCode parentName=\"p\">{`connectWithActions`}</inlineCode>{`, using `}<inlineCode parentName=\"p\">{`connect`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`applySpec`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`bindActionCreators`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { applySpec } from \"ramda\";\n\nconst enhance = connect(\n  applySpec({\n    count: selectors.getCounter,\n    isOdd: selectors.getCounterIsOdd,\n    isPositive: selectors.getCounterIsPositive,\n  }),\n  dispatch => ({\n    actions: bindActionCreators(actions, dispatch),\n  })\n);\n`}</code></pre>\n    <p>{`Alternatively, from version `}<inlineCode parentName=\"p\">{`1.5.0`}</inlineCode>{`, re-reduced supports hooks, using the following syntax:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { useActions, useReduxState } from \"re-reduced\";\n\nimport actions from \"./actions\";\nimport * as selectors from \"./selectors\";\n\nfunction Counter() {\n  const { decrement, increment, adjust } = useActions(actions);\n  const { count, isOdd, isPositive } = useReduxState({\n    count: selectors.getCounter,\n    isOdd: selectors.getCounterIsOdd,\n    isPositive: selectors.getCounterIsPositive,\n  });\n\n  return <div>{/* app render logic... */}</div>;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"demo\"\n    }}>{`Demo`}</h2>\n\n\n    <Playground __position={0} __code={'<Counter />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Counter\n    }} __codesandbox={``} mdxType=\"Playground\">\n  <Counter mdxType=\"Counter\" />\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}