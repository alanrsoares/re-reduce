{"remainingRequest":"/Users/alanrsoares/dev/re-reduced/node_modules/thread-loader/dist/cjs.js??ref--11-1!/Users/alanrsoares/dev/re-reduced/node_modules/docz/node_modules/babel-loader/lib/index.js??ref--11-2!/Users/alanrsoares/dev/re-reduced/node_modules/source-map-loader/index.js!/Users/alanrsoares/dev/re-reduced/src/lib/actions.ts","dependencies":[{"path":"/Users/alanrsoares/dev/re-reduced/src/lib/actions.ts","mtime":1557714458225},{"path":"/Users/alanrsoares/dev/re-reduced/node_modules/docz/node_modules/cache-loader/dist/cjs.js","mtime":1557712913498},{"path":"/Users/alanrsoares/dev/re-reduced/node_modules/thread-loader/dist/cjs.js","mtime":1553212856450},{"path":"/Users/alanrsoares/dev/re-reduced/node_modules/docz/node_modules/babel-loader/lib/index.js","mtime":1557712913458},{"path":"/Users/alanrsoares/dev/re-reduced/node_modules/source-map-loader/index.js","mtime":1553206056663}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/alanrsoares/dev/re-reduced/src/lib/actions.ts"],"names":["flip","toSnakeCase","createAction","type","namespace","$type","actionCreator","payload","options","error","undefined","meta","reduce","handler","fold","createAsyncAction","asyncAction","Object","assign","request","success","failure","CreateActionsAPI","action","createActions","length","actionsContructor","defs","keys","acc","key"],"mappings":";;;;;;;;;AAAA,OAAOA,IAAP,MAAiB,gBAAjB;AAGA,SAASC,WAAT,QAA4B,oBAA5B;AAEA;;;;;;;AAMA,OAAO,SAASC,YAAT,CACLC,IADK,EAELC,SAFK,EAGL;AACA,MAAMC,KAAK,GAAGJ,WAAW,CAACG,SAAS,aAAMA,SAAN,cAAmBD,IAAnB,IAA4BA,IAAtC,CAAzB;;AAEA,MAAMG,aAAa,GAAI,SAAjBA,aAAiB,CACrBC,OADqB,EAErBC,OAFqB;AAAA,WAGjB;AACJC,MAAAA,KAAK,EAAED,OAAO,GAAGA,OAAO,CAACC,KAAX,GAAmBC,SAD7B;AAEJC,MAAAA,IAAI,EAAEH,OAAO,GAAGA,OAAO,CAACG,IAAX,GAAkBD,SAF3B;AAGJH,MAAAA,OAAO,EAAPA,OAHI;AAIJJ,MAAAA,IAAI,EAAEE;AAJF,KAHiB;AAAA,GAAvB;;AAUAC,EAAAA,aAAa,CAACH,IAAd,GAAqBE,KAArB;;AAEAC,EAAAA,aAAa,CAACM,MAAd,GAAuB,UACrBC,OADqB;AAAA,+BAGpBP,aAAa,CAACH,IAHM,EAGCU,OAHD;AAAA,GAAvB;;AAMAP,EAAAA,aAAa,CAACQ,IAAd,GAAqB,UACnBD,OADmB;AAAA,+BAGlBP,aAAa,CAACH,IAHI,EAGGH,IAAI,CAACa,OAAD,CAHP;AAAA,GAArB;;AAMA,SAAOP,aAAP;AACD;AAED;;;;;;;;;;;;;;;;;;AAMA,OAAO,SAASS,iBAAT,CACLZ,IADK,EAELC,SAFK,EAGL;AACA,MAAMY,WAAqD,GAAGC,MAAM,CAACC,MAAP,CAC5DhB,YAAY,CAAWC,IAAX,EAAiBC,SAAjB,CADgD,EAE5D;AACEe,IAAAA,OAAO,EAAEjB,YAAY,WAAIC,IAAJ,eAAoBC,SAApB,CADvB;AAEEgB,IAAAA,OAAO,EAAElB,YAAY,WAAaC,IAAb,eAA6BC,SAA7B,CAFvB;AAGEiB,IAAAA,OAAO,EAAEnB,YAAY,WAAcC,IAAd,eAA8BC,SAA9B;AAHvB,GAF4D,CAA9D;AASA,SAAOY,WAAP;AACD;;;;;;;;;;;;;;;;;;;;;;;;AAQD,WAAaM,gBAAb;AAAA;AAAA;AAYA;;;;;;;AAZaA,gB,CACGC,M,GAAS;AAAA,SAAoC,UACzDpB,IADyD,EAEzDC,SAFyD;AAAA,WAGtDF,YAAY,CAAkBC,IAAlB,EAAwBC,SAAxB,CAH0C;AAAA,GAApC;AAAA,C;;AADZkB,gB,CAMGN,W,GAAc;AAAA,SAAgD,UAC1Eb,IAD0E,EAE1EC,SAF0E;AAAA,WAGvEW,iBAAiB,CAA4BZ,IAA5B,EAAkCC,SAAlC,CAHsD;AAAA,GAAhD;AAAA,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyB9B,OAAO,SAASoB,aAAT,GAAqC;AAC1C,MAAMpB,SAAS,GAAG,UAAKqB,MAAL,KAAgB,CAAhB,GAAoBf,SAApB,mDAAlB;AACA,MAAMgB,iBAAiB,GAAG,UAAKD,MAAL,KAAgB,CAAhB,sGAA1B;AACA,MAAME,IAAI,GAAGD,iBAAiB,CAACJ,gBAAD,CAA9B;AAEA,SAAOL,MAAM,CAACW,IAAP,CAAYD,IAAZ,EAAkBf,MAAlB;AACL;AACA,YAACiB,GAAD,EAAWC,GAAX;AAAA,6BACKD,GADL,sBAEGC,GAFH,EAESH,IAAI,CAACG,GAAD,CAAJ,CAAUA,GAAV,EAAe1B,SAAf,CAFT;AAAA,GAFK,EAML,EANK,CAAP;AAQD;;;;;;;;;;;;;;;;;;;;;;0BAzGeF,Y;0BAuCAa,iB;0BAsBHO,gB;0BA+BGE,a","sourcesContent":["import flip from \"ramda/src/flip\";\n\nimport { ActionCreator, ActionCreatorOptions, AsyncAction } from \"./core\";\nimport { toSnakeCase } from \"../helpers/strings\";\n\n/**\n * returns an action-creator function\n *\n * @param type - the action identifier, must be unique\n * @param namespace - optional namespace string to be prepended to the type\n */\nexport function createAction<TPayload = void, TMeta = any>(\n  type: string,\n  namespace?: string\n) {\n  const $type = toSnakeCase(namespace ? `${namespace}/${type}` : type);\n\n  const actionCreator = ((\n    payload: TPayload,\n    options?: ActionCreatorOptions<TMeta>\n  ) => ({\n    error: options ? options.error : undefined,\n    meta: options ? options.meta : undefined,\n    payload,\n    type: $type,\n  })) as ActionCreator<TPayload, TMeta>;\n\n  actionCreator.type = $type;\n\n  actionCreator.reduce = <TState>(\n    handler: (state: TState, payload: TPayload) => TState\n  ) => ({\n    [actionCreator.type]: handler,\n  });\n\n  actionCreator.fold = <TState>(\n    handler: (payload: TPayload, state: TState) => TState\n  ) => ({\n    [actionCreator.type]: flip(handler),\n  });\n\n  return actionCreator;\n}\n\n/**\n * returns a composite action-creator with nested action-creators for request, success and failure\n *\n * @param type - the action identifier, must be unique\n * @param namespace - optional namespace string to be prepended to the type\n */\nexport function createAsyncAction<TResult, TPayload = void, TFailure = Error>(\n  type: string,\n  namespace?: string\n) {\n  const asyncAction: AsyncAction<TResult, TPayload, TFailure> = Object.assign(\n    createAction<TPayload>(type, namespace),\n    {\n      request: createAction(`${type}_REQUEST`, namespace),\n      success: createAction<TResult>(`${type}_SUCCESS`, namespace),\n      failure: createAction<TFailure>(`${type}_FAILURE`, namespace),\n    }\n  );\n\n  return asyncAction;\n}\n\nexport type ActionCreatorMap<\n  T extends {\n    [k: string]: (type: string, namespace?: string) => any;\n  }\n> = { [P in keyof T]: ReturnType<T[P]> };\n\nexport class CreateActionsAPI {\n  public static action = <TPayload = void, TMeta = any>() => (\n    type: string,\n    namespace?: string\n  ) => createAction<TPayload, TMeta>(type, namespace);\n\n  public static asyncAction = <TResult, TPayload = void, TError = Error>() => (\n    type: string,\n    namespace?: string\n  ) => createAsyncAction<TResult, TPayload, TError>(type, namespace);\n}\n\n/**\n * Creates an object with namespaced action-creators\n *\n * @param namespace - string - a namespace to be prepended to the generated action types\n * @param actionsContructor\n */\nexport function createActions<\n  T extends {\n    [k: string]: (type: string, namespace?: string) => any;\n  }\n>(actionsContructor: (api: typeof CreateActionsAPI) => T): ActionCreatorMap<T>;\nexport function createActions<\n  T extends {\n    [k: string]: (type: string, namespace?: string) => any;\n  }\n>(\n  namespace: string,\n  actionsContructor: (api: typeof CreateActionsAPI) => T\n): ActionCreatorMap<T>;\nexport function createActions(...args: any) {\n  const namespace = args.length === 1 ? undefined : args[0];\n  const actionsContructor = args.length === 1 ? args[0] : args[1];\n  const defs = actionsContructor(CreateActionsAPI);\n\n  return Object.keys(defs).reduce(\n    /* hacky hack, i'd deeply appreciate some help with this type annotation */\n    (acc: any, key) => ({\n      ...acc,\n      [key]: defs[key](key, namespace),\n    }),\n    {}\n  );\n}\n"]}]}