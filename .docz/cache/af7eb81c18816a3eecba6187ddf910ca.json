{"remainingRequest":"/Users/alanrsoares/dev/re-reduced/node_modules/thread-loader/dist/cjs.js??ref--11-1!/Users/alanrsoares/dev/re-reduced/node_modules/babel-loader/lib/index.js??ref--11-2!/Users/alanrsoares/dev/re-reduced/node_modules/source-map-loader/index.js!/Users/alanrsoares/dev/re-reduced/src/lib/react-redux.ts","dependencies":[{"path":"/Users/alanrsoares/dev/re-reduced/src/lib/react-redux.ts","mtime":1557714525198},{"path":"/Users/alanrsoares/dev/re-reduced/node_modules/docz/node_modules/cache-loader/dist/cjs.js","mtime":1557712913498},{"path":"/Users/alanrsoares/dev/re-reduced/node_modules/thread-loader/dist/cjs.js","mtime":1553212856450},{"path":"/Users/alanrsoares/dev/re-reduced/node_modules/babel-loader/lib/index.js","mtime":1557712913458},{"path":"/Users/alanrsoares/dev/re-reduced/node_modules/source-map-loader/index.js","mtime":1553206056663}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:KGZ1bmN0aW9uICgpIHsKICB2YXIgZW50ZXJNb2R1bGUgPSAodHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsIDogcmVxdWlyZSgncmVhY3QtaG90LWxvYWRlcicpKS5lbnRlck1vZHVsZTsKICBlbnRlck1vZHVsZSAmJiBlbnRlck1vZHVsZShtb2R1bGUpOwp9KSgpOwoKaW1wb3J0IGFwcGx5U3BlYyBmcm9tICJyYW1kYS9zcmMvYXBwbHlTcGVjIjsKaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gInJlYWN0LXJlZHV4IjsKaW1wb3J0IHsgY29tcG9zZSB9IGZyb20gInJlZHV4IjsKaW1wb3J0IHsgdHJhbnNmb3JtVHJlZSB9IGZyb20gIi4uL2hlbHBlcnMvb2JqZWN0cyI7CgppZiAodHlwZW9mIERpc3BhdGNoZXIgIT09ICd1bmRlZmluZWQnICYmIERpc3BhdGNoZXIgJiYgRGlzcGF0Y2hlciA9PT0gT2JqZWN0KERpc3BhdGNoZXIpICYmIE9iamVjdC5pc0V4dGVuc2libGUoRGlzcGF0Y2hlcikpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGlzcGF0Y2hlciwgJ19fZmlsZW1ldGEnLCB7CiAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgdmFsdWU6IHsKICAgICAgbmFtZTogIkRpc3BhdGNoZXIiLAogICAgICBmaWxlbmFtZTogInNyYy9saWIvcmVhY3QtcmVkdXgudHMiCiAgICB9CiAgfSk7Cn0KCmlmICh0eXBlb2YgU2VsZWN0b3JTcGVjICE9PSAndW5kZWZpbmVkJyAmJiBTZWxlY3RvclNwZWMgJiYgU2VsZWN0b3JTcGVjID09PSBPYmplY3QoU2VsZWN0b3JTcGVjKSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKFNlbGVjdG9yU3BlYykpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2VsZWN0b3JTcGVjLCAnX19maWxlbWV0YScsIHsKICAgIGVudW1lcmFibGU6IHRydWUsCiAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICB2YWx1ZTogewogICAgICBuYW1lOiAiU2VsZWN0b3JTcGVjIiwKICAgICAgZmlsZW5hbWU6ICJzcmMvbGliL3JlYWN0LXJlZHV4LnRzIgogICAgfQogIH0pOwp9CgppZiAodHlwZW9mIENvbm5lY3RXaXRoQWN0aW9ucyAhPT0gJ3VuZGVmaW5lZCcgJiYgQ29ubmVjdFdpdGhBY3Rpb25zICYmIENvbm5lY3RXaXRoQWN0aW9ucyA9PT0gT2JqZWN0KENvbm5lY3RXaXRoQWN0aW9ucykgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShDb25uZWN0V2l0aEFjdGlvbnMpKSB7CiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbm5lY3RXaXRoQWN0aW9ucywgJ19fZmlsZW1ldGEnLCB7CiAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgdmFsdWU6IHsKICAgICAgbmFtZTogIkNvbm5lY3RXaXRoQWN0aW9ucyIsCiAgICAgIGZpbGVuYW1lOiAic3JjL2xpYi9yZWFjdC1yZWR1eC50cyIKICAgIH0KICB9KTsKfQoKdmFyIHRvRGlzcGF0Y2hlciA9IGZ1bmN0aW9uIHRvRGlzcGF0Y2hlcihkaXNwYXRjaCkgewogIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7CiAgICByZXR1cm4gY29tcG9zZShkaXNwYXRjaCwgYWN0aW9uKTsKICB9Owp9OwovKioKICogYmluZEFjdGlvbkNyZWF0b3JzCiAqCiAqIE1vbmtleXBhdGNoZXMgZGlzcGF0Y2ggdG8gdGhlIGFjdGlvbnMgbWFraW5nIHRoZW0gc2VsZi1kaXNwYWNoYWJsZQogKgogKiBAcGFyYW0gYWN0aW9ucwogKi8KCgpleHBvcnQgdmFyIGJpbmRBY3Rpb25DcmVhdG9ycyA9IGZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9ycyhhY3Rpb25zKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCkgewogICAgcmV0dXJuIHsKICAgICAgYWN0aW9uczogdHJhbnNmb3JtVHJlZSh0b0Rpc3BhdGNoZXIoZGlzcGF0Y2gpLCBhY3Rpb25zKQogICAgfTsKICB9Owp9OwoKaWYgKHR5cGVvZiBiaW5kQWN0aW9uQ3JlYXRvcnMgIT09ICd1bmRlZmluZWQnICYmIGJpbmRBY3Rpb25DcmVhdG9ycyAmJiBiaW5kQWN0aW9uQ3JlYXRvcnMgPT09IE9iamVjdChiaW5kQWN0aW9uQ3JlYXRvcnMpICYmIE9iamVjdC5pc0V4dGVuc2libGUoYmluZEFjdGlvbkNyZWF0b3JzKSkgewogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShiaW5kQWN0aW9uQ3JlYXRvcnMsICdfX2ZpbGVtZXRhJywgewogICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgIHZhbHVlOiB7CiAgICAgIG5hbWU6ICJiaW5kQWN0aW9uQ3JlYXRvcnMiLAogICAgICBmaWxlbmFtZTogInNyYy9saWIvcmVhY3QtcmVkdXgudHMiCiAgICB9CiAgfSk7Cn0KCmV4cG9ydCB2YXIgYXBwbHlTZWxlY3RvcnMgPSBmdW5jdGlvbiBhcHBseVNlbGVjdG9ycyhzcGVjKSB7CiAgcmV0dXJuIGFwcGx5U3BlYyhzcGVjKTsKfTsKLyoqCiAqIGNvbm5lY3RXaXRoQWN0aW9ucwogKgogKiBXcmFwcyByZWFjdC1yZWR1eCdzICJjb25uZWN0IiBoZWxwZXIsIGJpbmRpbmcgZGlzcGF0Y2ggdG8gdGhlIGFjdGlvbi1jcmVhdG9ycwogKgogKiBAcGFyYW0gYWN0aW9ucyAtIG9iamVjdCBvZiBhY3Rpb24tY3JlYXRvcnMKICogQHBhcmFtIG1hcFN0YXRlVG9Qcm9wcyAtCiAqIEl0IGNhbiBlaXRoZXIgYmUgYSBmdW5jdGlvbiB0aGF0IGRpcmVjdGx5IG1hcHMgdGhlIGFwcCdzIFN0YXRlIHRvIGEgY29tcG9uZW50J3MgUHJvcHMKICogb3IgYW4gb2JqZWN0IHdob3NlIGtleXMgcmVwcmVzZW50IHByb3BlcnRpZXMgaW4gdGhlIHRhcmdldCBjb21wb25lbnQgYW5kIHZhbHVlcyBhcmUgZnVuY3Rpb25zCiAqIHRoYXQgdGFrZSB0aGUgYXBwbGljYXRpb24ncyBTdGF0ZSBhbmQgb3B0aW9uYWxseSwgdGhlIGNvbm5lY3RlZCBjb21wb25lbnQncyBvd24gUHJvcHMuCiAqIFRob3NlIGZ1bmN0aW9ucyB0aGVuIHJldHVybiBhIGRlcml2ZWQgdmFsdWUgdGhhdCBtYXRjaGVzIHRoZSBjb21wb25lbnQncyBjb250cmFjdC4KICogSWRlYWxseSBzaG91bGQgYmUgdXNlZCB3aXRoIHJlZHV4IHNlbGVjdG9ycy4KICoKICovCgppZiAodHlwZW9mIGFwcGx5U2VsZWN0b3JzICE9PSAndW5kZWZpbmVkJyAmJiBhcHBseVNlbGVjdG9ycyAmJiBhcHBseVNlbGVjdG9ycyA9PT0gT2JqZWN0KGFwcGx5U2VsZWN0b3JzKSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKGFwcGx5U2VsZWN0b3JzKSkgewogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcHBseVNlbGVjdG9ycywgJ19fZmlsZW1ldGEnLCB7CiAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgdmFsdWU6IHsKICAgICAgbmFtZTogImFwcGx5U2VsZWN0b3JzIiwKICAgICAgZmlsZW5hbWU6ICJzcmMvbGliL3JlYWN0LXJlZHV4LnRzIgogICAgfQogIH0pOwp9CgpleHBvcnQgdmFyIGNvbm5lY3RXaXRoQWN0aW9ucyA9IGZ1bmN0aW9uIGNvbm5lY3RXaXRoQWN0aW9ucyhhY3Rpb25zLCBtYXBTdGF0ZVRvUHJvcHMpIHsKICB2YXIgc3RhdGVUb1Byb3BzID0gdHlwZW9mIG1hcFN0YXRlVG9Qcm9wcyA9PT0gIm9iamVjdCIgPyBhcHBseVNlbGVjdG9ycyhtYXBTdGF0ZVRvUHJvcHMpIDogbWFwU3RhdGVUb1Byb3BzOwogIHJldHVybiBjb25uZWN0KHN0YXRlVG9Qcm9wcywgYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbnMpKTsKfTsKCmlmICh0eXBlb2YgY29ubmVjdFdpdGhBY3Rpb25zICE9PSAndW5kZWZpbmVkJyAmJiBjb25uZWN0V2l0aEFjdGlvbnMgJiYgY29ubmVjdFdpdGhBY3Rpb25zID09PSBPYmplY3QoY29ubmVjdFdpdGhBY3Rpb25zKSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKGNvbm5lY3RXaXRoQWN0aW9ucykpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29ubmVjdFdpdGhBY3Rpb25zLCAnX19maWxlbWV0YScsIHsKICAgIGVudW1lcmFibGU6IHRydWUsCiAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICB2YWx1ZTogewogICAgICBuYW1lOiAiY29ubmVjdFdpdGhBY3Rpb25zIiwKICAgICAgZmlsZW5hbWU6ICJzcmMvbGliL3JlYWN0LXJlZHV4LnRzIgogICAgfQogIH0pOwp9Cgo7CgooZnVuY3Rpb24gKCkgewogIHZhciByZWFjdEhvdExvYWRlciA9ICh0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWwgOiByZXF1aXJlKCdyZWFjdC1ob3QtbG9hZGVyJykpLmRlZmF1bHQ7CgogIGlmICghcmVhY3RIb3RMb2FkZXIpIHsKICAgIHJldHVybjsKICB9CgogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKHRvRGlzcGF0Y2hlciwgInRvRGlzcGF0Y2hlciIsICIvVXNlcnMvYWxhbnJzb2FyZXMvZGV2L3JlLXJlZHVjZWQvc3JjL2xpYi9yZWFjdC1yZWR1eC50cyIpOwogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKGJpbmRBY3Rpb25DcmVhdG9ycywgImJpbmRBY3Rpb25DcmVhdG9ycyIsICIvVXNlcnMvYWxhbnJzb2FyZXMvZGV2L3JlLXJlZHVjZWQvc3JjL2xpYi9yZWFjdC1yZWR1eC50cyIpOwogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKGFwcGx5U2VsZWN0b3JzLCAiYXBwbHlTZWxlY3RvcnMiLCAiL1VzZXJzL2FsYW5yc29hcmVzL2Rldi9yZS1yZWR1Y2VkL3NyYy9saWIvcmVhY3QtcmVkdXgudHMiKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3Rlcihjb25uZWN0V2l0aEFjdGlvbnMsICJjb25uZWN0V2l0aEFjdGlvbnMiLCAiL1VzZXJzL2FsYW5yc29hcmVzL2Rldi9yZS1yZWR1Y2VkL3NyYy9saWIvcmVhY3QtcmVkdXgudHMiKTsKfSkoKTsKCjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIGxlYXZlTW9kdWxlID0gKHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbCA6IHJlcXVpcmUoJ3JlYWN0LWhvdC1sb2FkZXInKSkubGVhdmVNb2R1bGU7CiAgbGVhdmVNb2R1bGUgJiYgbGVhdmVNb2R1bGUobW9kdWxlKTsKfSkoKTs="},{"version":3,"sources":["/Users/alanrsoares/dev/re-reduced/src/lib/react-redux.ts"],"names":["applySpec","connect","compose","transformTree","toDispatcher","dispatch","action","bindActionCreators","actions","applySelectors","spec","connectWithActions","mapStateToProps","stateToProps"],"mappings":";;;;;AAAA,OAAOA,SAAP,MAAsB,qBAAtB;AACA,SACEC,OADF,QAIO,aAJP;AAKA,SAASC,OAAT,QAAkC,OAAlC;AAGA,SAASC,aAAT,QAAoC,oBAApC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD;AAAA,SAAwB,UAC3CC,MAD2C;AAAA,WAG3CJ,OAAO,CACLG,QADK,EAELC,MAFK,CAHoC;AAAA,GAAxB;AAAA,CAArB;AAQA;;;;;;;;;AAOA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAChCC,OADgC;AAAA,SAE7B,UAACH,QAAD;AAAA,WAAyB;AAC5BG,MAAAA,OAAO,EAAEL,aAAa,CACpBC,YAAY,CAACC,QAAD,CADQ,EAEpBG,OAFoB;AADM,KAAzB;AAAA,GAF6B;AAAA,CAA3B;;;;;;;;;;;;;AASP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAC5BC,IAD4B;AAAA,SAE4BV,SAAS,CAACU,IAAD,CAFrC;AAAA,CAAvB;AAIP;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA,OAAO,IAAMC,kBAAsC,GAAG,SAAzCA,kBAAyC,CAMpDH,OANoD,EAOpDI,eAPoD,EAUjD;AACH,MAAMC,YAAY,GAChB,OAAOD,eAAP,KAA2B,QAA3B,GACIH,cAAc,CAACG,eAAD,CADlB,GAEIA,eAHN;AAKA,SAAOX,OAAO,CACZY,YADY,EAEZN,kBAAkB,CAACC,OAAD,CAFN,CAAd;AAID,CApBM;;;;;;;;;;;;;;;;;;;;;;0BA1CDJ,Y;0BAeOG,kB;0BASAE,c;0BAkBAE,kB","sourcesContent":["import applySpec from \"ramda/src/applySpec\";\nimport {\n  connect,\n  InferableComponentEnhancerWithProps,\n  MapStateToProps,\n} from \"react-redux\";\nimport { compose, Dispatch } from \"redux\";\n\nimport { ActionCreator } from \"./core\";\nimport { transformTree, Tree } from \"../helpers/objects\";\n\nexport type Dispatcher<T = any> = (payload: T) => void;\n\nexport type SelectorSpec<TProps, TState, TOwnProps extends {} = any> = {\n  [K in keyof TProps]: (state: TState, ownProps?: TOwnProps) => TProps[K]\n};\n\nexport interface ConnectWithActions {\n  <\n    TProps extends { actions: TActions },\n    TOwnProps extends {} = any,\n    TActions extends Tree<ActionCreator<any>> = {}\n  >(\n    actions: TActions\n  ): InferableComponentEnhancerWithProps<TProps, TOwnProps>;\n\n  <\n    TProps extends { actions: TActions },\n    TOwnProps extends {} = any,\n    TState extends {} = any,\n    TActions extends Tree<ActionCreator<any>> = {}\n  >(\n    actions: TActions,\n    mapStateToProps:\n      | MapStateToProps<Partial<TProps>, TOwnProps, TState>\n      | SelectorSpec<Partial<TProps>, TState, TOwnProps>\n  ): InferableComponentEnhancerWithProps<TProps, TOwnProps>;\n}\n\nconst toDispatcher = (dispatch: Dispatch) => <TPayload>(\n  action: ActionCreator<TPayload>\n) =>\n  compose<Dispatcher<TPayload>>(\n    dispatch,\n    action\n  );\n\n/**\n * bindActionCreators\n *\n * Monkeypatches dispatch to the actions making them self-dispachable\n *\n * @param actions\n */\nexport const bindActionCreators = <TActions extends Tree<ActionCreator<any>>>(\n  actions: TActions\n) => (dispatch: Dispatch) => ({\n  actions: transformTree<ActionCreator, Dispatcher>(\n    toDispatcher(dispatch),\n    actions\n  ) as TActions,\n});\n\nexport const applySelectors = <TProps = {}, TState = {}, TOwnProps = {}>(\n  spec: SelectorSpec<TProps, TState, TOwnProps>\n): MapStateToProps<Partial<TProps>, TOwnProps, TState> => applySpec(spec);\n\n/**\n * connectWithActions\n *\n * Wraps react-redux's \"connect\" helper, binding dispatch to the action-creators\n *\n * @param actions - object of action-creators\n * @param mapStateToProps -\n * It can either be a function that directly maps the app's State to a component's Props\n * or an object whose keys represent properties in the target component and values are functions\n * that take the application's State and optionally, the connected component's own Props.\n * Those functions then return a derived value that matches the component's contract.\n * Ideally should be used with redux selectors.\n *\n */\nexport const connectWithActions: ConnectWithActions = <\n  TProps extends { actions: TActions },\n  TOwnProps extends {} = any,\n  TState extends {} = any,\n  TActions extends Tree<ActionCreator<any>> = {}\n>(\n  actions: TActions,\n  mapStateToProps?:\n    | MapStateToProps<Partial<TProps>, TOwnProps, TState>\n    | SelectorSpec<Partial<TProps>, TState, TOwnProps>\n) => {\n  const stateToProps =\n    typeof mapStateToProps === \"object\"\n      ? applySelectors(mapStateToProps)\n      : mapStateToProps;\n\n  return connect(\n    stateToProps,\n    bindActionCreators(actions)\n  );\n};\n"]}]}