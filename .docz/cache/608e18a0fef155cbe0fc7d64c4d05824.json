{"remainingRequest":"/Users/alanrsoares/dev/re-reduced/node_modules/thread-loader/dist/cjs.js??ref--11-1!/Users/alanrsoares/dev/re-reduced/node_modules/babel-loader/lib/index.js??ref--11-2!/Users/alanrsoares/dev/re-reduced/node_modules/source-map-loader/index.js!/Users/alanrsoares/dev/re-reduced/src/helpers/objects.ts","dependencies":[{"path":"/Users/alanrsoares/dev/re-reduced/src/helpers/objects.ts","mtime":1557714531472},{"path":"/Users/alanrsoares/dev/re-reduced/node_modules/docz/node_modules/cache-loader/dist/cjs.js","mtime":1557712913498},{"path":"/Users/alanrsoares/dev/re-reduced/node_modules/thread-loader/dist/cjs.js","mtime":1553212856450},{"path":"/Users/alanrsoares/dev/re-reduced/node_modules/babel-loader/lib/index.js","mtime":1557712913458},{"path":"/Users/alanrsoares/dev/re-reduced/node_modules/source-map-loader/index.js","mtime":1553206056663}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:KGZ1bmN0aW9uICgpIHsKICB2YXIgZW50ZXJNb2R1bGUgPSAodHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsIDogcmVxdWlyZSgncmVhY3QtaG90LWxvYWRlcicpKS5lbnRlck1vZHVsZTsKICBlbnRlck1vZHVsZSAmJiBlbnRlck1vZHVsZShtb2R1bGUpOwp9KSgpOwoKaW1wb3J0IG1hcE9iakluZGV4ZWQgZnJvbSAicmFtZGEvc3JjL21hcE9iakluZGV4ZWQiOwovKioKICogUmVwcmVzZW50cyBhIG5vZGUgaW4gYSBUcmVlLCBhIG5vZGUgY2FuIGJlIGVpdGhlciBhIExlYWYgb3IgYSBCcmFuY2ggKHdpY2ggaXMgYWxzbyBhIFRyZWUpCiAqLwoKaWYgKHR5cGVvZiBOb2RlICE9PSAndW5kZWZpbmVkJyAmJiBOb2RlICYmIE5vZGUgPT09IE9iamVjdChOb2RlKSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKE5vZGUpKSB7CiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGUsICdfX2ZpbGVtZXRhJywgewogICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgIHZhbHVlOiB7CiAgICAgIG5hbWU6ICJOb2RlIiwKICAgICAgZmlsZW5hbWU6ICJzcmMvaGVscGVycy9vYmplY3RzLnRzIgogICAgfQogIH0pOwp9CgppZiAodHlwZW9mIFRyZWUgIT09ICd1bmRlZmluZWQnICYmIFRyZWUgJiYgVHJlZSA9PT0gT2JqZWN0KFRyZWUpICYmIE9iamVjdC5pc0V4dGVuc2libGUoVHJlZSkpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVHJlZSwgJ19fZmlsZW1ldGEnLCB7CiAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgdmFsdWU6IHsKICAgICAgbmFtZTogIlRyZWUiLAogICAgICBmaWxlbmFtZTogInNyYy9oZWxwZXJzL29iamVjdHMudHMiCiAgICB9CiAgfSk7Cn0KCi8qKgogKiBBcHBsaWVzIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHJlY3Vyc2l2ZWx5IHRvIGVhY2ggbGVhZiBpbiBhIHRyZWUKICoKICogQHBhcmFtIHRyYW5zZm9ybSAtIGEgZnVuY3Rpb24gdG8gYmUgYXBwbGllZCB0byBlYWNoIGxlYWYKICogQHBhcmFtIHRyZWUgLSBhIHRyZWUtbGlrZSBvYmplY3Qgd2l0aCBkZWVwbHkgbmVzdGVkIHByb3BzCiAqLwpleHBvcnQgdmFyIHRyYW5zZm9ybVRyZWUgPSBmdW5jdGlvbiB0cmFuc2Zvcm1UcmVlKHRyYW5zZm9ybSwgdHJlZSkgewogIHJldHVybiBtYXBPYmpJbmRleGVkKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7CiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAib2JqZWN0IiA/IHRyYW5zZm9ybVRyZWUodHJhbnNmb3JtLCB2YWx1ZSkgOiB0cmFuc2Zvcm0odmFsdWUsIGtleSk7CiAgfSwgdHJlZSk7Cn07CgppZiAodHlwZW9mIHRyYW5zZm9ybVRyZWUgIT09ICd1bmRlZmluZWQnICYmIHRyYW5zZm9ybVRyZWUgJiYgdHJhbnNmb3JtVHJlZSA9PT0gT2JqZWN0KHRyYW5zZm9ybVRyZWUpICYmIE9iamVjdC5pc0V4dGVuc2libGUodHJhbnNmb3JtVHJlZSkpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkodHJhbnNmb3JtVHJlZSwgJ19fZmlsZW1ldGEnLCB7CiAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgdmFsdWU6IHsKICAgICAgbmFtZTogInRyYW5zZm9ybVRyZWUiLAogICAgICBmaWxlbmFtZTogInNyYy9oZWxwZXJzL29iamVjdHMudHMiCiAgICB9CiAgfSk7Cn0KCjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIHJlYWN0SG90TG9hZGVyID0gKHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbCA6IHJlcXVpcmUoJ3JlYWN0LWhvdC1sb2FkZXInKSkuZGVmYXVsdDsKCiAgaWYgKCFyZWFjdEhvdExvYWRlcikgewogICAgcmV0dXJuOwogIH0KCiAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIodHJhbnNmb3JtVHJlZSwgInRyYW5zZm9ybVRyZWUiLCAiL1VzZXJzL2FsYW5yc29hcmVzL2Rldi9yZS1yZWR1Y2VkL3NyYy9oZWxwZXJzL29iamVjdHMudHMiKTsKfSkoKTsKCjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIGxlYXZlTW9kdWxlID0gKHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbCA6IHJlcXVpcmUoJ3JlYWN0LWhvdC1sb2FkZXInKSkubGVhdmVNb2R1bGU7CiAgbGVhdmVNb2R1bGUgJiYgbGVhdmVNb2R1bGUobW9kdWxlKTsKfSkoKTs="},{"version":3,"sources":["/Users/alanrsoares/dev/re-reduced/src/helpers/objects.ts"],"names":["mapObjIndexed","transformTree","transform","tree","value","key"],"mappings":";;;;;AAAA,OAAOA,aAAP,MAA0B,yBAA1B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA;;;;;;AAMA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAC3BC,SAD2B,EAE3BC,IAF2B;AAAA,SAI3BH,aAAa,CAAC,UAACI,KAAD,EAAqBC,GAArB,EAAmD;AAC/D,WAAO,OAAOD,KAAP,KAAiB,QAAjB,GACHH,aAAa,CAACC,SAAD,EAAYE,KAAZ,CADV,GAEFF,SAAS,CAACE,KAAD,EAAQC,GAAR,CAFd;AAGD,GAJY,EAIVF,IAJU,CAJc;AAAA,CAAtB;;;;;;;;;;;;;;;;;;;;;;0BAAMF,a","sourcesContent":["import mapObjIndexed from \"ramda/src/mapObjIndexed\";\n\n/**\n * Represents a node in a Tree, a node can be either a Leaf or a Branch (wich is also a Tree)\n */\nexport type Node<TLeaf> = TLeaf | Tree<TLeaf>;\n\n/**\n * Represents a tree-like structure where the leaves have type TLeaf\n */\nexport interface Tree<TLeaf> {\n  [k: string]: Node<TLeaf>;\n}\n\n/**\n * Applies a transform function recursively to each leaf in a tree\n *\n * @param transform - a function to be applied to each leaf\n * @param tree - a tree-like object with deeply nested props\n */\nexport const transformTree = <TLeft, TRight>(\n  transform: (value: TLeft, key: string) => TRight,\n  tree: Tree<TLeft>\n): Tree<TRight> =>\n  mapObjIndexed((value: Node<TLeft>, key: string): Node<TRight> => {\n    return typeof value === \"object\"\n      ? transformTree(transform, value as Tree<TLeft>)\n      : (transform(value, key) as TRight);\n  }, tree);\n"]}]}