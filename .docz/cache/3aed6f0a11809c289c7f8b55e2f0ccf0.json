{"remainingRequest":"/Users/alanrsoares/dev/re-reduced/node_modules/thread-loader/dist/cjs.js??ref--11-1!/Users/alanrsoares/dev/re-reduced/node_modules/docz/node_modules/babel-loader/lib/index.js??ref--11-2!/Users/alanrsoares/dev/re-reduced/node_modules/source-map-loader/index.js!/Users/alanrsoares/dev/re-reduced/src/lib/sagas.ts","dependencies":[{"path":"/Users/alanrsoares/dev/re-reduced/src/lib/sagas.ts","mtime":1557714542716},{"path":"/Users/alanrsoares/dev/re-reduced/node_modules/docz/node_modules/cache-loader/dist/cjs.js","mtime":1557712913498},{"path":"/Users/alanrsoares/dev/re-reduced/node_modules/thread-loader/dist/cjs.js","mtime":1553212856450},{"path":"/Users/alanrsoares/dev/re-reduced/node_modules/docz/node_modules/babel-loader/lib/index.js","mtime":1557712913458},{"path":"/Users/alanrsoares/dev/re-reduced/node_modules/source-map-loader/index.js","mtime":1553206056663}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAiL1VzZXJzL2FsYW5yc29hcmVzL2Rldi9yZS1yZWR1Y2VkL25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtcmVhY3QtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvciI7CgooZnVuY3Rpb24gKCkgewogIHZhciBlbnRlck1vZHVsZSA9ICh0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWwgOiByZXF1aXJlKCdyZWFjdC1ob3QtbG9hZGVyJykpLmVudGVyTW9kdWxlOwogIGVudGVyTW9kdWxlICYmIGVudGVyTW9kdWxlKG1vZHVsZSk7Cn0pKCk7CgppbXBvcnQgeyBjYWxsLCBmb3JrLCBwdXQgfSBmcm9tICJyZWR1eC1zYWdhL2VmZmVjdHMiOwoKaWYgKHR5cGVvZiBBUElXb3JrZXJIb29rRWZmZWN0ICE9PSAndW5kZWZpbmVkJyAmJiBBUElXb3JrZXJIb29rRWZmZWN0ICYmIEFQSVdvcmtlckhvb2tFZmZlY3QgPT09IE9iamVjdChBUElXb3JrZXJIb29rRWZmZWN0KSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKEFQSVdvcmtlckhvb2tFZmZlY3QpKSB7CiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFQSVdvcmtlckhvb2tFZmZlY3QsICdfX2ZpbGVtZXRhJywgewogICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgIHZhbHVlOiB7CiAgICAgIG5hbWU6ICJBUElXb3JrZXJIb29rRWZmZWN0IiwKICAgICAgZmlsZW5hbWU6ICJzcmMvbGliL3NhZ2FzLnRzIgogICAgfQogIH0pOwp9CgppZiAodHlwZW9mIEFQSVdvcmtlckhvb2tzICE9PSAndW5kZWZpbmVkJyAmJiBBUElXb3JrZXJIb29rcyAmJiBBUElXb3JrZXJIb29rcyA9PT0gT2JqZWN0KEFQSVdvcmtlckhvb2tzKSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKEFQSVdvcmtlckhvb2tzKSkgewogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBUElXb3JrZXJIb29rcywgJ19fZmlsZW1ldGEnLCB7CiAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgdmFsdWU6IHsKICAgICAgbmFtZTogIkFQSVdvcmtlckhvb2tzIiwKICAgICAgZmlsZW5hbWU6ICJzcmMvbGliL3NhZ2FzLnRzIgogICAgfQogIH0pOwp9CgpleHBvcnQgZnVuY3Rpb24gYXBpV29ya2VyRmFjdG9yeShhc3luY0FjdGlvbiwgYXN5bmNIYW5kbGVyLCBob29rcykgewogIHJldHVybiAoCiAgICAvKiNfX1BVUkVfXyovCiAgICBfcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gc2FnYVdvcmtlcihhY3Rpb24pIHsKICAgICAgdmFyIF9yZXN1bHQ7CgogICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIHNhZ2FXb3JrZXIkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAwOwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgIHJldHVybiBwdXQoYXN5bmNBY3Rpb24ucmVxdWVzdCgpKTsKCiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICBpZiAoISh0eXBlb2YgYWN0aW9uLnBheWxvYWQgPT09ICJ1bmRlZmluZWQiKSkgewogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2OwogICAgICAgICAgICAgIHJldHVybiBjYWxsKGFzeW5jSGFuZGxlcik7CgogICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMjsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgcmV0dXJuIGNhbGwoYXN5bmNIYW5kbGVyLCBhY3Rpb24ucGF5bG9hZCk7CgogICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHQuc2VudDsKCiAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgX3Jlc3VsdCA9IF9jb250ZXh0LnQwOwoKICAgICAgICAgICAgICBpZiAoIShob29rcyAmJiBob29rcy5vblN1Y2Nlc3MpKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTg7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNjsKICAgICAgICAgICAgICByZXR1cm4gZm9yayhob29rcy5vblN1Y2Nlc3MsIF9yZXN1bHQsIGFjdGlvbik7CgogICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyMDsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgMTg6CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDIwOwogICAgICAgICAgICAgIHJldHVybiBwdXQoYXN5bmNBY3Rpb24uc3VjY2VzcyhfcmVzdWx0KSk7CgogICAgICAgICAgICBjYXNlIDIwOgogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzMTsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgMjI6CiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDIyOwogICAgICAgICAgICAgIF9jb250ZXh0LnQxID0gX2NvbnRleHRbImNhdGNoIl0oMCk7CgogICAgICAgICAgICAgIGlmICghKGhvb2tzICYmIGhvb2tzLm9uRmFpbHVyZSkpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI3OwogICAgICAgICAgICAgIHJldHVybiBmb3JrKGhvb2tzLm9uRmFpbHVyZSwgX2NvbnRleHQudDEsIGFjdGlvbik7CgogICAgICAgICAgICBjYXNlIDI3OgogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzMTsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgMjk6CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDMxOwogICAgICAgICAgICAgIHJldHVybiBwdXQoYXN5bmNBY3Rpb24uZmFpbHVyZShfY29udGV4dC50MSkpOwoKICAgICAgICAgICAgY2FzZSAzMToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgc2FnYVdvcmtlciwgbnVsbCwgW1swLCAyMl1dKTsKICAgIH0pCiAgKTsKfQoKaWYgKHR5cGVvZiBhcGlXb3JrZXJGYWN0b3J5ICE9PSAndW5kZWZpbmVkJyAmJiBhcGlXb3JrZXJGYWN0b3J5ICYmIGFwaVdvcmtlckZhY3RvcnkgPT09IE9iamVjdChhcGlXb3JrZXJGYWN0b3J5KSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKGFwaVdvcmtlckZhY3RvcnkpKSB7CiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFwaVdvcmtlckZhY3RvcnksICdfX2ZpbGVtZXRhJywgewogICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgIHZhbHVlOiB7CiAgICAgIG5hbWU6ICJhcGlXb3JrZXJGYWN0b3J5IiwKICAgICAgZmlsZW5hbWU6ICJzcmMvbGliL3NhZ2FzLnRzIgogICAgfQogIH0pOwp9Cgo7CgooZnVuY3Rpb24gKCkgewogIHZhciByZWFjdEhvdExvYWRlciA9ICh0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWwgOiByZXF1aXJlKCdyZWFjdC1ob3QtbG9hZGVyJykpLmRlZmF1bHQ7CgogIGlmICghcmVhY3RIb3RMb2FkZXIpIHsKICAgIHJldHVybjsKICB9CgogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKGFwaVdvcmtlckZhY3RvcnksICJhcGlXb3JrZXJGYWN0b3J5IiwgIi9Vc2Vycy9hbGFucnNvYXJlcy9kZXYvcmUtcmVkdWNlZC9zcmMvbGliL3NhZ2FzLnRzIik7Cn0pKCk7Cgo7CgooZnVuY3Rpb24gKCkgewogIHZhciBsZWF2ZU1vZHVsZSA9ICh0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWwgOiByZXF1aXJlKCdyZWFjdC1ob3QtbG9hZGVyJykpLmxlYXZlTW9kdWxlOwogIGxlYXZlTW9kdWxlICYmIGxlYXZlTW9kdWxlKG1vZHVsZSk7Cn0pKCk7"},{"version":3,"sources":["/Users/alanrsoares/dev/re-reduced/src/lib/sagas.ts"],"names":["call","fork","put","apiWorkerFactory","asyncAction","asyncHandler","hooks","sagaWorker","action","request","payload","result","onSuccess","success","onFailure","failure"],"mappings":";;;;;;;AACA,SACEA,IADF,EAEEC,IAFF,EAGEC,GAHF,QAQO,oBARP;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,OAAO,SAASC,gBAAT,CAKLC,WALK,EAMLC,YANK,EASLC,KATK,EAUL;AACA;AAAA;AAAA,6BAAO,SAAUC,UAAV,CAAqBC,MAArB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEH,qBAAMN,GAAG,CAACE,WAAW,CAACK,OAAZ,EAAD,CAAT;;AAFG;AAAA,oBAKD,OAAOD,MAAM,CAACE,OAAd,KAA0B,WALzB;AAAA;AAAA;AAAA;;AAAA;AAMG,qBAAMV,IAAI,CAAsCK,YAAtC,CAAV;;AANH;AAAA;AAAA;AAAA;;AAAA;AAAA;AAOG,qBAAML,IAAI,CACRK,YADQ,EAERG,MAAM,CAACE,OAFC,CAAV;;AAPH;AAAA;;AAAA;AAIGC,cAAAA,OAJH;;AAAA,oBAYCL,KAAK,IAAIA,KAAK,CAACM,SAZhB;AAAA;AAAA;AAAA;;AAAA;AAaD,qBAAMX,IAAI,CAACK,KAAK,CAACM,SAAP,EAAkBD,OAAlB,EAA0BH,MAA1B,CAAV;;AAbC;AAAA;AAAA;;AAAA;AAAA;AAeD,qBAAMN,GAAG,CAACE,WAAW,CAACS,OAAZ,CAAoBF,OAApB,CAAD,CAAT;;AAfC;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,oBAkBCL,KAAK,IAAIA,KAAK,CAACQ,SAlBhB;AAAA;AAAA;AAAA;;AAAA;AAmBD,qBAAMb,IAAI,CAACK,KAAK,CAACQ,SAAP,eAAyBN,MAAzB,CAAV;;AAnBC;AAAA;AAAA;;AAAA;AAAA;AAqBD,qBAAMN,GAAG,CAACE,WAAW,CAACW,OAAZ,aAAD,CAAT;;AArBC;AAAA;AAAA;AAAA;AAAA;AAAA,SAAUR,UAAV;AAAA,KAAP;AAAA;AAyBD;;;;;;;;;;;;;;;;;;;;;;0BApCeJ,gB","sourcesContent":["import { SagaIterator } from \"redux-saga\";\nimport {\n  call,\n  fork,\n  put,\n  AllEffect,\n  ForkEffect,\n  PutEffect,\n  CallEffect,\n} from \"redux-saga/effects\";\n\nimport { Action, AsyncAction } from \"./core\";\n\nexport type APIWorkerHookEffect<TPayload, TCombiner = any> =\n  | PutEffect<Action<TPayload>>\n  | AllEffect<TCombiner>\n  | ForkEffect\n  | CallEffect;\n\nexport interface APIWorkerHooks<TResult, TFailure, TAction> {\n  onSuccess(\n    result: TResult,\n    action: TAction\n  ): IterableIterator<APIWorkerHookEffect<TResult>>;\n  onFailure(\n    error: TFailure,\n    action: TAction\n  ): IterableIterator<APIWorkerHookEffect<TFailure>>;\n}\n\nexport function apiWorkerFactory<\n  TResult,\n  TPayload = void,\n  TFailure extends Error = Error\n>(\n  asyncAction: AsyncAction<TResult, TPayload>,\n  asyncHandler: TPayload extends void | undefined\n    ? () => Promise<TResult>\n    : (payload: TPayload) => Promise<TResult>,\n  hooks?: Partial<APIWorkerHooks<TResult, TFailure, Action<TPayload>>>\n) {\n  return function* sagaWorker(action: Action<TPayload>): SagaIterator {\n    try {\n      yield put(asyncAction.request());\n\n      const result: TResult =\n        typeof action.payload === \"undefined\"\n          ? yield call<(payload?: any) => Promise<TResult>>(asyncHandler)\n          : yield call<(payload: TPayload) => Promise<TResult>>(\n              asyncHandler,\n              action.payload\n            );\n\n      if (hooks && hooks.onSuccess) {\n        yield fork(hooks.onSuccess, result, action);\n      } else {\n        yield put(asyncAction.success(result));\n      }\n    } catch (error) {\n      if (hooks && hooks.onFailure) {\n        yield fork(hooks.onFailure, error, action);\n      } else {\n        yield put(asyncAction.failure(error));\n      }\n    }\n  };\n}\n"]}]}