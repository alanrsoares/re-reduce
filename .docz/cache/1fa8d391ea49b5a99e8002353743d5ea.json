{"remainingRequest":"/Users/alanrsoares/dev/re-reduced/node_modules/thread-loader/dist/cjs.js??ref--11-1!/Users/alanrsoares/dev/re-reduced/node_modules/babel-loader/lib/index.js??ref--11-2!/Users/alanrsoares/dev/re-reduced/node_modules/source-map-loader/index.js!/Users/alanrsoares/dev/re-reduced/examples/Counter/selectors.ts","dependencies":[{"path":"/Users/alanrsoares/dev/re-reduced/examples/Counter/selectors.ts","mtime":1557712553964},{"path":"/Users/alanrsoares/dev/re-reduced/node_modules/docz/node_modules/cache-loader/dist/cjs.js","mtime":1557712913498},{"path":"/Users/alanrsoares/dev/re-reduced/node_modules/thread-loader/dist/cjs.js","mtime":1553212856450},{"path":"/Users/alanrsoares/dev/re-reduced/node_modules/babel-loader/lib/index.js","mtime":1557712913458},{"path":"/Users/alanrsoares/dev/re-reduced/node_modules/source-map-loader/index.js","mtime":1553206056663}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:KGZ1bmN0aW9uICgpIHsKICB2YXIgZW50ZXJNb2R1bGUgPSAodHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsIDogcmVxdWlyZSgncmVhY3QtaG90LWxvYWRlcicpKS5lbnRlck1vZHVsZTsKICBlbnRlck1vZHVsZSAmJiBlbnRlck1vZHVsZShtb2R1bGUpOwp9KSgpOwoKaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IgfSBmcm9tICJyZXNlbGVjdCI7CmV4cG9ydCB2YXIgZ2V0Q291bnRlciA9IGZ1bmN0aW9uIGdldENvdW50ZXIoc3RhdGUpIHsKICByZXR1cm4gc3RhdGUuY291bnRlcjsKfTsKCmlmICh0eXBlb2YgZ2V0Q291bnRlciAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2V0Q291bnRlciAmJiBnZXRDb3VudGVyID09PSBPYmplY3QoZ2V0Q291bnRlcikgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShnZXRDb3VudGVyKSkgewogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShnZXRDb3VudGVyLCAnX19maWxlbWV0YScsIHsKICAgIGVudW1lcmFibGU6IHRydWUsCiAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICB2YWx1ZTogewogICAgICBuYW1lOiAiZ2V0Q291bnRlciIsCiAgICAgIGZpbGVuYW1lOiAiZXhhbXBsZXMvQ291bnRlci9zZWxlY3RvcnMudHMiCiAgICB9CiAgfSk7Cn0KCmV4cG9ydCB2YXIgZ2V0Q291bnRlcklzT2RkID0gY3JlYXRlU2VsZWN0b3IoZ2V0Q291bnRlciwgZnVuY3Rpb24gKGNvdW50ZXIpIHsKICByZXR1cm4gY291bnRlciAlIDIgIT09IDA7Cn0pOwoKaWYgKHR5cGVvZiBnZXRDb3VudGVySXNPZGQgIT09ICd1bmRlZmluZWQnICYmIGdldENvdW50ZXJJc09kZCAmJiBnZXRDb3VudGVySXNPZGQgPT09IE9iamVjdChnZXRDb3VudGVySXNPZGQpICYmIE9iamVjdC5pc0V4dGVuc2libGUoZ2V0Q291bnRlcklzT2RkKSkgewogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShnZXRDb3VudGVySXNPZGQsICdfX2ZpbGVtZXRhJywgewogICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgIHZhbHVlOiB7CiAgICAgIG5hbWU6ICJnZXRDb3VudGVySXNPZGQiLAogICAgICBmaWxlbmFtZTogImV4YW1wbGVzL0NvdW50ZXIvc2VsZWN0b3JzLnRzIgogICAgfQogIH0pOwp9CgpleHBvcnQgdmFyIGdldENvdW50ZXJJc1Bvc2l0aXZlID0gY3JlYXRlU2VsZWN0b3IoZ2V0Q291bnRlciwgZnVuY3Rpb24gKGNvdW50ZXIpIHsKICByZXR1cm4gY291bnRlciA+PSAwOwp9KTsKCmlmICh0eXBlb2YgZ2V0Q291bnRlcklzUG9zaXRpdmUgIT09ICd1bmRlZmluZWQnICYmIGdldENvdW50ZXJJc1Bvc2l0aXZlICYmIGdldENvdW50ZXJJc1Bvc2l0aXZlID09PSBPYmplY3QoZ2V0Q291bnRlcklzUG9zaXRpdmUpICYmIE9iamVjdC5pc0V4dGVuc2libGUoZ2V0Q291bnRlcklzUG9zaXRpdmUpKSB7CiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGdldENvdW50ZXJJc1Bvc2l0aXZlLCAnX19maWxlbWV0YScsIHsKICAgIGVudW1lcmFibGU6IHRydWUsCiAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICB2YWx1ZTogewogICAgICBuYW1lOiAiZ2V0Q291bnRlcklzUG9zaXRpdmUiLAogICAgICBmaWxlbmFtZTogImV4YW1wbGVzL0NvdW50ZXIvc2VsZWN0b3JzLnRzIgogICAgfQogIH0pOwp9Cgo7CgooZnVuY3Rpb24gKCkgewogIHZhciByZWFjdEhvdExvYWRlciA9ICh0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWwgOiByZXF1aXJlKCdyZWFjdC1ob3QtbG9hZGVyJykpLmRlZmF1bHQ7CgogIGlmICghcmVhY3RIb3RMb2FkZXIpIHsKICAgIHJldHVybjsKICB9CgogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKGdldENvdW50ZXIsICJnZXRDb3VudGVyIiwgIi9Vc2Vycy9hbGFucnNvYXJlcy9kZXYvcmUtcmVkdWNlZC9leGFtcGxlcy9Db3VudGVyL3NlbGVjdG9ycy50cyIpOwogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKGdldENvdW50ZXJJc09kZCwgImdldENvdW50ZXJJc09kZCIsICIvVXNlcnMvYWxhbnJzb2FyZXMvZGV2L3JlLXJlZHVjZWQvZXhhbXBsZXMvQ291bnRlci9zZWxlY3RvcnMudHMiKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihnZXRDb3VudGVySXNQb3NpdGl2ZSwgImdldENvdW50ZXJJc1Bvc2l0aXZlIiwgIi9Vc2Vycy9hbGFucnNvYXJlcy9kZXYvcmUtcmVkdWNlZC9leGFtcGxlcy9Db3VudGVyL3NlbGVjdG9ycy50cyIpOwp9KSgpOwoKOwoKKGZ1bmN0aW9uICgpIHsKICB2YXIgbGVhdmVNb2R1bGUgPSAodHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsIDogcmVxdWlyZSgncmVhY3QtaG90LWxvYWRlcicpKS5sZWF2ZU1vZHVsZTsKICBsZWF2ZU1vZHVsZSAmJiBsZWF2ZU1vZHVsZShtb2R1bGUpOwp9KSgpOw=="},{"version":3,"sources":["/Users/alanrsoares/dev/re-reduced/examples/Counter/selectors.ts"],"names":["createSelector","getCounter","state","counter","getCounterIsOdd","getCounterIsPositive"],"mappings":";;;;;AAAA,SAASA,cAAT,QAA+B,UAA/B;AAIA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD;AAAA,SAAkBA,KAAK,CAACC,OAAxB;AAAA,CAAnB;;;;;;;;;;;;;AAEP,OAAO,IAAMC,eAAe,GAAGJ,cAAc,CAC3CC,UAD2C,EAE3C,UAAAE,OAAO;AAAA,SAAIA,OAAO,GAAG,CAAV,KAAgB,CAApB;AAAA,CAFoC,CAAtC;;;;;;;;;;;;;AAKP,OAAO,IAAME,oBAAoB,GAAGL,cAAc,CAChDC,UADgD,EAEhD,UAAAE,OAAO;AAAA,SAAIA,OAAO,IAAI,CAAf;AAAA,CAFyC,CAA3C;;;;;;;;;;;;;;;;;;;;;;0BAPMF,U;0BAEAG,e;0BAKAC,oB","sourcesContent":["import { createSelector } from \"reselect\";\n\nimport { State } from \"./types\";\n\nexport const getCounter = (state: State) => state.counter;\n\nexport const getCounterIsOdd = createSelector(\n  getCounter,\n  counter => counter % 2 !== 0\n);\n\nexport const getCounterIsPositive = createSelector(\n  getCounter,\n  counter => counter >= 0\n);\n"]}]}