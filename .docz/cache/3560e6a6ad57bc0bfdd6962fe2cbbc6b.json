{"remainingRequest":"/Users/alanrsoares/dev/re-reduced/node_modules/thread-loader/dist/cjs.js??ref--11-1!/Users/alanrsoares/dev/re-reduced/node_modules/babel-loader/lib/index.js??ref--11-2!/Users/alanrsoares/dev/re-reduced/node_modules/source-map-loader/index.js!/Users/alanrsoares/dev/re-reduced/examples/ToDo/api.ts","dependencies":[{"path":"/Users/alanrsoares/dev/re-reduced/examples/ToDo/api.ts","mtime":1557712553957},{"path":"/Users/alanrsoares/dev/re-reduced/node_modules/docz/node_modules/cache-loader/dist/cjs.js","mtime":1557712913498},{"path":"/Users/alanrsoares/dev/re-reduced/node_modules/thread-loader/dist/cjs.js","mtime":1553212856450},{"path":"/Users/alanrsoares/dev/re-reduced/node_modules/babel-loader/lib/index.js","mtime":1557712913458},{"path":"/Users/alanrsoares/dev/re-reduced/node_modules/source-map-loader/index.js","mtime":1553206056663}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/alanrsoares/dev/re-reduced/examples/ToDo/api.ts"],"names":["delay","LS_KEY","paths","todos","tags","fetchToDos","JSON","parse","localStorage","getItem","addToDo","todo","$todo","id","Date","now","setItem","stringify","concat","deleteToDo","filtered","filter","patchToDo","updatedToDo","updatedToDos","map"],"mappings":";;;;;;;;;AAAA,SAASA,KAAT,QAAsB,WAAtB;AAGA,IAAMC,MAAM,GAAG,qBAAf;AAEA,IAAMC,KAAK,GAAG;AACZC,EAAAA,KAAK,YAAKF,MAAL,WADO;AAEZG,EAAAA,IAAI,YAAKH,MAAL;AAFQ,CAAd;AAKA,OAAO,IAAMI,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAClBL,KAAK,CAAC,IAAD,CADa;;AAAA;AAAA,6CAEjBM,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqBP,KAAK,CAACC,KAA3B,KAAqC,IAAhD,CAFiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVE,UAAU;AAAA;AAAA;AAAA,GAAhB;;;;;;;;;;;;;AAKP,OAAO,IAAMK,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,kBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACfC,YAAAA,KADe,qBAEhBD,IAFgB;AAGnBE,cAAAA,EAAE,oBAAaC,IAAI,CAACC,GAAL,EAAb;AAHiB;AAAA;AAAA,mBAMDV,UAAU,EANT;;AAAA;AAMfF,YAAAA,KANe;AAQrBK,YAAAA,YAAY,CAACQ,OAAb,CAAqBd,KAAK,CAACC,KAA3B,EAAkCG,IAAI,CAACW,SAAL,CAAed,KAAK,CAACe,MAAN,CAAaN,KAAb,CAAf,CAAlC;AARqB,8CAUdA,KAVc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPF,OAAO;AAAA;AAAA;AAAA,GAAb;;;;;;;;;;;;;AAaP,OAAO,IAAMS,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,kBAAON,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACJR,UAAU,EADN;;AAAA;AAClBF,YAAAA,KADkB;AAElBiB,YAAAA,QAFkB,GAEPjB,KAAK,CAACkB,MAAN,CAAa,UAAAV,IAAI;AAAA,qBAAIA,IAAI,CAACE,EAAL,KAAYA,EAAhB;AAAA,aAAjB,CAFO;AAIxBL,YAAAA,YAAY,CAACQ,OAAb,CAAqBd,KAAK,CAACC,KAA3B,EAAkCG,IAAI,CAACW,SAAL,CAAeG,QAAf,CAAlC;AAJwB,8CAMjBP,EANiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVM,UAAU;AAAA;AAAA;AAAA,GAAhB;;;;;;;;;;;;;AASP,OAAO,IAAMG,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,kBAAOC,WAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACHlB,UAAU,EADP;;AAAA;AACjBF,YAAAA,KADiB;AAGjBqB,YAAAA,YAHiB,GAGFrB,KAAK,CAACsB,GAAN,CACnB,UAAAd,IAAI;AAAA,qBAAKA,IAAI,CAACE,EAAL,KAAYU,WAAW,CAACV,EAAxB,GAA6BU,WAA7B,GAA2CZ,IAAhD;AAAA,aADe,CAHE;AAOvBH,YAAAA,YAAY,CAACQ,OAAb,CAAqBd,KAAK,CAACC,KAA3B,EAAkCG,IAAI,CAACW,SAAL,CAAeO,YAAf,CAAlC;AAPuB,8CAShBD,WATgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATD,SAAS;AAAA;AAAA;AAAA,GAAf;;;;;;;;;;;;;;;;;;;;;;0BAlCDrB,M;0BAEAC,K;0BAKOG,U;0BAKAK,O;0BAaAS,U;0BASAG,S","sourcesContent":["import { delay } from \"./helpers\";\nimport { ToDo } from \"./types\";\n\nconst LS_KEY = \"re-reduced:todo_app\";\n\nconst paths = {\n  todos: `${LS_KEY}/todos`,\n  tags: `${LS_KEY}/tags`\n};\n\nexport const fetchToDos = async () => {\n  await delay(1000);\n  return JSON.parse(localStorage.getItem(paths.todos) || \"[]\") as ToDo[];\n};\n\nexport const addToDo = async (todo: Partial<ToDo>) => {\n  const $todo = {\n    ...todo,\n    id: `todo-id-${Date.now()}`\n  } as ToDo;\n\n  const todos = await fetchToDos();\n\n  localStorage.setItem(paths.todos, JSON.stringify(todos.concat($todo)));\n\n  return $todo;\n};\n\nexport const deleteToDo = async (id: string) => {\n  const todos = await fetchToDos();\n  const filtered = todos.filter(todo => todo.id !== id);\n\n  localStorage.setItem(paths.todos, JSON.stringify(filtered));\n\n  return id;\n};\n\nexport const patchToDo = async (updatedToDo: ToDo) => {\n  const todos = await fetchToDos();\n\n  const updatedToDos = todos.map(\n    todo => (todo.id === updatedToDo.id ? updatedToDo : todo)\n  );\n\n  localStorage.setItem(paths.todos, JSON.stringify(updatedToDos));\n\n  return updatedToDo;\n};\n"]}]}