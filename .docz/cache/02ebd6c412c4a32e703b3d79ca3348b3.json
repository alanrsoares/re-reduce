{"remainingRequest":"/Users/alanrsoares/dev/re-reduced/node_modules/thread-loader/dist/cjs.js??ref--11-1!/Users/alanrsoares/dev/re-reduced/node_modules/docz/node_modules/babel-loader/lib/index.js??ref--11-2!/Users/alanrsoares/dev/re-reduced/node_modules/source-map-loader/index.js!/Users/alanrsoares/dev/re-reduced/examples/ToDo/sagas.ts","dependencies":[{"path":"/Users/alanrsoares/dev/re-reduced/examples/ToDo/sagas.ts","mtime":1557712553960},{"path":"/Users/alanrsoares/dev/re-reduced/node_modules/docz/node_modules/cache-loader/dist/cjs.js","mtime":1557712913498},{"path":"/Users/alanrsoares/dev/re-reduced/node_modules/thread-loader/dist/cjs.js","mtime":1553212856450},{"path":"/Users/alanrsoares/dev/re-reduced/node_modules/docz/node_modules/babel-loader/lib/index.js","mtime":1557712913458},{"path":"/Users/alanrsoares/dev/re-reduced/node_modules/source-map-loader/index.js","mtime":1553206056663}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAiL1VzZXJzL2FsYW5yc29hcmVzL2Rldi9yZS1yZWR1Y2VkL25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtcmVhY3QtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvciI7CgooZnVuY3Rpb24gKCkgewogIHZhciBlbnRlck1vZHVsZSA9ICh0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWwgOiByZXF1aXJlKCdyZWFjdC1ob3QtbG9hZGVyJykpLmVudGVyTW9kdWxlOwogIGVudGVyTW9kdWxlICYmIGVudGVyTW9kdWxlKG1vZHVsZSk7Cn0pKCk7Cgp2YXIgX21hcmtlZCA9Ci8qI19fUFVSRV9fKi8KX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKHNhZ2FXYXRjaGVyKTsKCmltcG9ydCB7IHRha2VMYXRlc3QsIGFsbCB9IGZyb20gInJlZHV4LXNhZ2EvZWZmZWN0cyI7CmltcG9ydCBhY3Rpb25zIGZyb20gIi4vYWN0aW9ucyI7CmltcG9ydCAqIGFzIGFwaSBmcm9tICIuL2FwaSI7CmltcG9ydCB7IGFwaVdvcmtlckZhY3RvcnkgfSBmcm9tICIuLi8uLi9zcmMiOwpleHBvcnQgdmFyIGZldGNoVG9Eb3MgPSBhcGlXb3JrZXJGYWN0b3J5KGFjdGlvbnMuZmV0Y2gsIGFwaS5mZXRjaFRvRG9zKTsKCmlmICh0eXBlb2YgZmV0Y2hUb0RvcyAhPT0gJ3VuZGVmaW5lZCcgJiYgZmV0Y2hUb0RvcyAmJiBmZXRjaFRvRG9zID09PSBPYmplY3QoZmV0Y2hUb0RvcykgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShmZXRjaFRvRG9zKSkgewogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmZXRjaFRvRG9zLCAnX19maWxlbWV0YScsIHsKICAgIGVudW1lcmFibGU6IHRydWUsCiAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICB2YWx1ZTogewogICAgICBuYW1lOiAiZmV0Y2hUb0RvcyIsCiAgICAgIGZpbGVuYW1lOiAiZXhhbXBsZXMvVG9Eby9zYWdhcy50cyIKICAgIH0KICB9KTsKfQoKZXhwb3J0IHZhciBhZGRUb0RvcyA9IGFwaVdvcmtlckZhY3RvcnkoYWN0aW9ucy5hZGQsIGFwaS5hZGRUb0RvKTsKCmlmICh0eXBlb2YgYWRkVG9Eb3MgIT09ICd1bmRlZmluZWQnICYmIGFkZFRvRG9zICYmIGFkZFRvRG9zID09PSBPYmplY3QoYWRkVG9Eb3MpICYmIE9iamVjdC5pc0V4dGVuc2libGUoYWRkVG9Eb3MpKSB7CiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFkZFRvRG9zLCAnX19maWxlbWV0YScsIHsKICAgIGVudW1lcmFibGU6IHRydWUsCiAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICB2YWx1ZTogewogICAgICBuYW1lOiAiYWRkVG9Eb3MiLAogICAgICBmaWxlbmFtZTogImV4YW1wbGVzL1RvRG8vc2FnYXMudHMiCiAgICB9CiAgfSk7Cn0KCmV4cG9ydCB2YXIgdXBkYXRlVG9EbyA9IGFwaVdvcmtlckZhY3RvcnkoYWN0aW9ucy51cGRhdGUsIGFwaS5wYXRjaFRvRG8pOwoKaWYgKHR5cGVvZiB1cGRhdGVUb0RvICE9PSAndW5kZWZpbmVkJyAmJiB1cGRhdGVUb0RvICYmIHVwZGF0ZVRvRG8gPT09IE9iamVjdCh1cGRhdGVUb0RvKSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKHVwZGF0ZVRvRG8pKSB7CiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHVwZGF0ZVRvRG8sICdfX2ZpbGVtZXRhJywgewogICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgIHZhbHVlOiB7CiAgICAgIG5hbWU6ICJ1cGRhdGVUb0RvIiwKICAgICAgZmlsZW5hbWU6ICJleGFtcGxlcy9Ub0RvL3NhZ2FzLnRzIgogICAgfQogIH0pOwp9CgpleHBvcnQgdmFyIGRlbGV0ZVRvRG8gPSBhcGlXb3JrZXJGYWN0b3J5KGFjdGlvbnNbImRlbGV0ZSJdLCBhcGkuZGVsZXRlVG9Ebyk7CgppZiAodHlwZW9mIGRlbGV0ZVRvRG8gIT09ICd1bmRlZmluZWQnICYmIGRlbGV0ZVRvRG8gJiYgZGVsZXRlVG9EbyA9PT0gT2JqZWN0KGRlbGV0ZVRvRG8pICYmIE9iamVjdC5pc0V4dGVuc2libGUoZGVsZXRlVG9EbykpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGVsZXRlVG9EbywgJ19fZmlsZW1ldGEnLCB7CiAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgdmFsdWU6IHsKICAgICAgbmFtZTogImRlbGV0ZVRvRG8iLAogICAgICBmaWxlbmFtZTogImV4YW1wbGVzL1RvRG8vc2FnYXMudHMiCiAgICB9CiAgfSk7Cn0KCmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNhZ2FXYXRjaGVyKCkgewogIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gc2FnYVdhdGNoZXIkKF9jb250ZXh0KSB7CiAgICB3aGlsZSAoMSkgewogICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgY2FzZSAwOgogICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7CiAgICAgICAgICByZXR1cm4gYWxsKFt0YWtlTGF0ZXN0KGFjdGlvbnMuZmV0Y2gudHlwZSwgZmV0Y2hUb0RvcyksIHRha2VMYXRlc3QoYWN0aW9ucy5hZGQudHlwZSwgYWRkVG9Eb3MpLCB0YWtlTGF0ZXN0KGFjdGlvbnMudXBkYXRlLnR5cGUsIHVwZGF0ZVRvRG8pLCB0YWtlTGF0ZXN0KGFjdGlvbnNbImRlbGV0ZSJdLnR5cGUsIGRlbGV0ZVRvRG8pXSk7CgogICAgICAgIGNhc2UgMjoKICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgfQogICAgfQogIH0sIF9tYXJrZWQpOwp9CgppZiAodHlwZW9mIHNhZ2FXYXRjaGVyICE9PSAndW5kZWZpbmVkJyAmJiBzYWdhV2F0Y2hlciAmJiBzYWdhV2F0Y2hlciA9PT0gT2JqZWN0KHNhZ2FXYXRjaGVyKSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKHNhZ2FXYXRjaGVyKSkgewogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzYWdhV2F0Y2hlciwgJ19fZmlsZW1ldGEnLCB7CiAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgdmFsdWU6IHsKICAgICAgbmFtZTogInNhZ2FXYXRjaGVyIiwKICAgICAgZmlsZW5hbWU6ICJleGFtcGxlcy9Ub0RvL3NhZ2FzLnRzIgogICAgfQogIH0pOwp9Cgo7CgooZnVuY3Rpb24gKCkgewogIHZhciByZWFjdEhvdExvYWRlciA9ICh0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWwgOiByZXF1aXJlKCdyZWFjdC1ob3QtbG9hZGVyJykpLmRlZmF1bHQ7CgogIGlmICghcmVhY3RIb3RMb2FkZXIpIHsKICAgIHJldHVybjsKICB9CgogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKGZldGNoVG9Eb3MsICJmZXRjaFRvRG9zIiwgIi9Vc2Vycy9hbGFucnNvYXJlcy9kZXYvcmUtcmVkdWNlZC9leGFtcGxlcy9Ub0RvL3NhZ2FzLnRzIik7CiAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIoYWRkVG9Eb3MsICJhZGRUb0RvcyIsICIvVXNlcnMvYWxhbnJzb2FyZXMvZGV2L3JlLXJlZHVjZWQvZXhhbXBsZXMvVG9Eby9zYWdhcy50cyIpOwogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKHVwZGF0ZVRvRG8sICJ1cGRhdGVUb0RvIiwgIi9Vc2Vycy9hbGFucnNvYXJlcy9kZXYvcmUtcmVkdWNlZC9leGFtcGxlcy9Ub0RvL3NhZ2FzLnRzIik7CiAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIoZGVsZXRlVG9EbywgImRlbGV0ZVRvRG8iLCAiL1VzZXJzL2FsYW5yc29hcmVzL2Rldi9yZS1yZWR1Y2VkL2V4YW1wbGVzL1RvRG8vc2FnYXMudHMiKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihzYWdhV2F0Y2hlciwgInNhZ2FXYXRjaGVyIiwgIi9Vc2Vycy9hbGFucnNvYXJlcy9kZXYvcmUtcmVkdWNlZC9leGFtcGxlcy9Ub0RvL3NhZ2FzLnRzIik7Cn0pKCk7Cgo7CgooZnVuY3Rpb24gKCkgewogIHZhciBsZWF2ZU1vZHVsZSA9ICh0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWwgOiByZXF1aXJlKCdyZWFjdC1ob3QtbG9hZGVyJykpLmxlYXZlTW9kdWxlOwogIGxlYXZlTW9kdWxlICYmIGxlYXZlTW9kdWxlKG1vZHVsZSk7Cn0pKCk7"},{"version":3,"sources":["/Users/alanrsoares/dev/re-reduced/examples/ToDo/sagas.ts"],"names":["sagaWatcher","takeLatest","all","actions","api","apiWorkerFactory","fetchToDos","fetch","addToDos","add","addToDo","updateToDo","update","patchToDo","deleteToDo","type"],"mappings":";;;;;;;;;yBA4ByBA,W;;AA5BzB,SAASC,UAAT,EAAqBC,GAArB,QAAgC,oBAAhC;AAEA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAO,KAAKC,GAAZ,MAAqB,OAArB;AAEA,SAASC,gBAAT,QAAiC,WAAjC;AAGA,OAAO,IAAMC,UAAU,GAAGD,gBAAgB,CACxCF,OAAO,CAACI,KADgC,EAExCH,GAAG,CAACE,UAFoC,CAAnC;;;;;;;;;;;;;AAKP,OAAO,IAAME,QAAQ,GAAGH,gBAAgB,CACtCF,OAAO,CAACM,GAD8B,EAEtCL,GAAG,CAACM,OAFkC,CAAjC;;;;;;;;;;;;;AAKP,OAAO,IAAMC,UAAU,GAAGN,gBAAgB,CACxCF,OAAO,CAACS,MADgC,EAExCR,GAAG,CAACS,SAFoC,CAAnC;;;;;;;;;;;;;AAKP,OAAO,IAAMC,UAAU,GAAGT,gBAAgB,CACxCF,OAAO,UADiC,EAExCC,GAAG,CAACU,UAFoC,CAAnC;;;;;;;;;;;;;AAKP,eAAe,SAAUd,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAME,GAAG,CAAC,CACRD,UAAU,CAACE,OAAO,CAACI,KAAR,CAAcQ,IAAf,EAAqBT,UAArB,CADF,EAERL,UAAU,CAACE,OAAO,CAACM,GAAR,CAAYM,IAAb,EAAmBP,QAAnB,CAFF,EAGRP,UAAU,CAACE,OAAO,CAACS,MAAR,CAAeG,IAAhB,EAAsBJ,UAAtB,CAHF,EAIRV,UAAU,CAACE,OAAO,UAAP,CAAeY,IAAhB,EAAsBD,UAAtB,CAJF,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;0BApBFR,U;0BAKAE,Q;0BAKAG,U;0BAKAG,U;0BAKYd,W","sourcesContent":["import { takeLatest, all } from \"redux-saga/effects\";\n\nimport actions from \"./actions\";\nimport * as api from \"./api\";\n\nimport { apiWorkerFactory } from \"../../src\";\nimport { ToDo } from \"./types\";\n\nexport const fetchToDos = apiWorkerFactory<ToDo[]>(\n  actions.fetch,\n  api.fetchToDos\n);\n\nexport const addToDos = apiWorkerFactory<ToDo, Partial<ToDo>>(\n  actions.add,\n  api.addToDo\n);\n\nexport const updateToDo = apiWorkerFactory<ToDo, ToDo>(\n  actions.update,\n  api.patchToDo\n);\n\nexport const deleteToDo = apiWorkerFactory<string, string>(\n  actions.delete,\n  api.deleteToDo\n);\n\nexport default function* sagaWatcher() {\n  yield all([\n    takeLatest(actions.fetch.type, fetchToDos),\n    takeLatest(actions.add.type, addToDos),\n    takeLatest(actions.update.type, updateToDo),\n    takeLatest(actions.delete.type, deleteToDo)\n  ]);\n}\n"]}]}